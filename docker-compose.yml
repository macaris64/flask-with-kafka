version: '3.8'
networks:
  app_network:
    driver: bridge
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_MESSAGE_MAX_BYTES: "100000000"
      KAFKA_REPLICA_FETCH_MAX_BYTES: "100000000"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'dump' | nc kafka 9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  flask_app:
    build: .
    ports:
      - "3000:3000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      FLASK_DEBUG: "1"
      ENABLE_KAFKA: "1"
      FLASK_RUN_HOST: "0.0.0.0"
      FLASK_RUN_PORT: "3000"
    networks:
      - app_network
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - .:/app
    command: ["gunicorn", "-w", "4", "-b", "0.0.0.0:3000", "app.app:app"]

  tests:
    build: .
    volumes:
      - .:/app
    command: ["pytest"]

  tests-with-coverage:
    build: .
    volumes:
      - .:/app
    command: ["pytest", "--cov=app", "--cov-report=html"]
